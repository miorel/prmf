#summary About our algorithm packet for ACM ICPC and other programming contests
#labels Projects

<wiki:toc max_depth="2" />

= Synopsis =

{{{
# Get the latest source
svn co http://prmf.googlecode.com/svn/trunk/algo/
cd algo

# Compile a pdf
make pdf

# Prepare a source archive
make zip

# Print the packet's table of contents in Google Code wiki format
./get_toc.pl

# Remove the pdf, zip, and any temporary files
make clean
}}}

= About =

The algorithm packet contains mathematical formulae, implementations of common algorithms, and other resources which may be useful in an algorithmic programming competition. It was designed for the [http://www.acm.org/ Association of Computing Machinery] [http://icpc.baylor.edu/ International Collegiate Programming Contest], but may be useful in other contests.

The packet was prepared using LaTeX.

= Downloading =

Most people just want to _use_ the algorithm packet. If you're in that category, [http://code.google.com/p/prmf/downloads/list?q=label:AlgorithmPacket get a pdf from the Downloads page].

= Compiling =

For a variety of reasons, you might wish to compile the algorithm packet yourself. To do so, you'll need the source. One option is to [http://code.google.com/p/prmf/downloads/list?q=label:AlgorithmPacket download a source archive]. If you've gotta have the latest and greatest, or if you plan on making changes to the packet, you should get the source from the repository. Execute `svn co http://prmf.googlecode.com/svn/trunk/algo/` at the command line (or [http://subversion.apache.org/packages.html use a client program or plugin]).

The packet source comes with a Makefile, so assuming you have the `make` and `pdflatex` commands (which you _should_ if your system is cool), you can execute `make pdf` in the source directory to compile a pdf!

= Developing = 

_This section is a stub. Please improve it!_

== Preparing a source archive ==

{{{
make zip
}}} 

== Cleaning after yourself ==

{{{
make clean
}}}

== Adding files ==

You'll have to edit the Makefile. Good luck.

== Rubber ==

The Makefile has an optional dependency on the [http://iml.univ-mrs.fr/~beffara/soft/rubber/ Rubber] project. This is a wrapper for the LaTeX commands that compiles documents "the right number of times." If you don't have Rubber, `make pdf` will perform _three_ passes over the source (to resolve all the references, build a table of contents, etc.). You're therefore encouraged to install Rubber to save some compile time, because "the right number of times" will usually be less than three.

= Packet table of contents =

If you want to "try before you buy" here is the table of contents of the algorithm packet. (This was obtained using the `get_toc.pl` script included with the packet source.)

  # Regular expressions
   # Syntax summary
   # How many backslashes?
   # Examples
    # Collapse whitespace
    # Find tigers!
    # Check for a valid e-mail address (not comprehensive)
    # Word count
    # Collapse duplicate characters
    # Increment all integers in some text
    # Check if an integer is even
    # Multiply by two
   # Quantifiers: greedy vs. non-greedy
  # Math
   # Combinatorics
    # Factorial
    # Permutations
    # Combinations
    # Miscellaneous choosing
   # Linear algebra
    # Cramer's rule
   # Geometry
    # Pythagorean theorem and distance between two points
    # Circle equation, given three points
    # Polygon area, given vertex coordinates
    # Polygon area on an integer grid (Pick's theorem)
    # Quadrilateral area, given side lengths (Bretschneider's formula and Brahmagupta's formula)
    # Triangle area, given side lengths (Heron's formula)
    # Convex hull (Graham scan)
    # Miscellaneous theorems
   # Number theory
    # Definitions
    # Greatest common divisor and least common multiple
    # The extended Euclidean algorithm
    # Finding primes
    # Prime factorization
    # Number-theoretic functions
    # Miscellaneous formulas
  # Dynamic programming
   # Introduction
   # The knapsack problem
    # Greedy solution when fractional items are allowed
    # 0-1 knapsack
    # Unbounded knapsack
   # Longest common substring
   # Longest common subsequence
   # Longest increasing subsequence
   # Maximum subsequence sum
  # Graph theory
   # Introduction
   # Graph Representation
    # Adjacency Matrix
    # Adjacency List
   # Basic Traversal techniques
    # Breadth First Search
    # Depth First Search
   # Minimum Spanning Tree
   # Shortest Path
    # Dijkstra's single source shortest path
    # Floyd Warshall All pairs shortest path
   # Random graph theory stuff that doesn't fit anywhere else
  # Miscellaneous
   # Integer sequences
    # Fibonacci numbers
    # Mersenne primes
    # Perfect numbers
    # Triangular numbers
    # Pentagonal numbers
    # Hexagonal numbers
    # Octahedral numbers
    # Catalan numbers
    # Carmichael numbers
   # Strings
    # Letter count (case-insensitive)
   # Arrays
    # Compare two arrays
    # Reverse (in place)
    # Next permutation (in place)
   # Card games
    # Poker hand ranking
  # The key to success
   # The contest started. What do I do?
   # My submission wasn't accepted
    # Did you read the problem?
    # Does your code pass the examples?
    # Compile error
    # Runtime error
    # Time limit exceeded
    # Memory limit exceeded
    # Excessive output
    # Presentation error / Output format error
    # Wrong answer
   # Strategy
